package main

import (
	"flag"
	"fmt"
	"os"
	"strings"
)

func setTheme(path string, theme *string) {
	var sb strings.Builder
	sb.WriteString("# WARNING: this file has been auto-generated by alacritty-theme-switcher. DO NOT EDIT MANUALLY!\n")
	if theme != nil {
		sb.WriteString(fmt.Sprintf("import = [ \"%s\" ]\n", *theme))
	}
	if err := os.WriteFile(path, []byte(sb.String()), 0644); err != nil {
		fmt.Fprintf(os.Stderr, "An error occurred writing the theme file at %s: %s\n", path, err.Error())
		os.Exit(-1)
	} else {
		fmt.Fprintf(os.Stderr, "Wrote theme file at %s.\n", path)
	}
}

func main() {
	themeFilePtr := flag.String("config_file", os.ExpandEnv("$HOME/.config/alacritty/theme.toml"), "The path of the 'theme config file', i.e. the file which must be imported from alacritty.toml and acts as a 'symlink' to the actual theme file. This will be overwritten by this program.")
	chosenThemePtr := flag.String("theme", "", "Path of theme .toml file")
	shouldResetPtr := flag.Bool("reset", false, "reset to the default theme")
	flag.Parse()

	shouldReset := *shouldResetPtr

	if *chosenThemePtr != "" && shouldReset {
		fmt.Fprintln(os.Stderr, "Both -theme and -reset were given, don't know what to do!")
		os.Exit(-1)
	} else if *chosenThemePtr != "" {
		setTheme(*themeFilePtr, chosenThemePtr)
	} else if shouldReset {
		setTheme(*themeFilePtr, nil)
	} else {
		fmt.Fprintln(os.Stderr, "No theme given.")
		os.Exit(-1)
	}
}
